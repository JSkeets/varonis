name: Build and Push Container

on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'api/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: true

    - name: Set up environment variables
      id: env-setup
      run: |
        echo "REPO_NAME=restaurant-svc-${ENVIRONMENT}-restaurant-svc" >> $GITHUB_ENV
        echo "LAMBDA_FUNCTION_NAME=restaurant-${ENVIRONMENT}-restaurant-svc" >> $GITHUB_ENV
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

    - name: Check existing image
      id: check-image
      run: |
        if aws ecr describe-images \
          --repository-name ${{ env.REPO_NAME }} \
          --image-ids imageTag=${{ github.sha }} 2>/dev/null; then
          echo "image_exists=true" >> $GITHUB_OUTPUT
        else
          echo "image_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      if: steps.check-image.outputs.image_exists == 'false'
      working-directory: api
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:${{ github.sha }} .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:${{ github.sha }}

    - name: Update Parameter Store
      run: |
        aws ssm put-parameter \
          --name "/restaurant-svc/${{ github.event.inputs.environment || 'dev' }}/image-version" \
          --value "${{ github.sha }}" \
          --type "String" \
          --overwrite

    - name: Update Lambda Function
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:${{ github.sha }} 