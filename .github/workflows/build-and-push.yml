name: Build and Push Container

on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'api/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: true

    - name: Build, push, and deploy
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd api
        REPO_NAME="restaurant-svc-${ENVIRONMENT}-restaurant-svc"
        LAMBDA_FUNCTION_NAME="restaurant-svc-${ENVIRONMENT}-restaurant-svc"
        
        # Check if image already exists
        if ! aws ecr describe-images \
          --repository-name $REPO_NAME \
          --image-ids imageTag=$IMAGE_TAG 2>/dev/null; then
          
          echo "Image tag $IMAGE_TAG doesn't exist, building and pushing..."
          docker build -t $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG
          
          # Update Parameter Store with new image version
          aws ssm put-parameter \
            --name "/restaurant-svc/${ENVIRONMENT}/image-version" \
            --value "$IMAGE_TAG" \
            --type "String" \
            --overwrite

          echo "Updated Parameter Store with new image version: $IMAGE_TAG"
          
          # Update Lambda function with new image
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG

          echo "Updated Lambda function with new image version: $IMAGE_TAG"
        else
          echo "Image tag $IMAGE_TAG already exists, skipping build and push"
        fi 