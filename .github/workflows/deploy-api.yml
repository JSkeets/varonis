name: Deploy API

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set environment variables
      run: |
        echo "REPO_NAME=restaurant-svc-${ENVIRONMENT}-restaurant-svc" >> $GITHUB_ENV
        echo "LAMBDA_FUNCTION_NAME=restaurant-${ENVIRONMENT}-restaurant-svc" >> $GITHUB_ENV
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment }}

    - name: Update Parameter Store
      run: |
        aws ssm put-parameter \
          --name "/restaurant-svc/${{ github.event.inputs.environment }}/image-version" \
          --value "${{ github.event.inputs.image_tag }}" \
          --type "String" \
          --overwrite

    - name: Update Lambda Function
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:${{ github.event.inputs.image_tag }}

    - name: Verify Deployment
      run: |
        # Wait for Lambda update to complete
        aws lambda wait function-updated --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
        
        # Get current version
        CURRENT_VERSION=$(aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --query 'Configuration.ImageConfigResponse.ImageConfig.ImageUri' --output text)
        
        if [[ $CURRENT_VERSION != *"${{ github.event.inputs.image_tag }}"* ]]; then
          echo "❌ Deployment verification failed: Version mismatch"
          exit 1
        fi
        
        echo "✅ Deployment verified successfully"

    - name: Notify Success
      if: success()
      run: |
        echo "✅ API deployment to ${{ github.event.inputs.environment }} completed successfully!"

    - name: Notify Failure
      if: failure()
      run: |
        echo "❌ API deployment to ${{ github.event.inputs.environment }} failed!" 