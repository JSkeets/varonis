name: Infrastructure Bootstrap (State Backend & ECR)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  id-token: write

jobs:
  setup-ecr:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create Terraform State Resources
      run: |
        # Check if S3 bucket exists, create if it doesn't
        if ! aws s3api head-bucket --bucket restaurant-svc-${{ github.event.inputs.environment }}-terraform-state 2>/dev/null; then
          # Create bucket with encryption enabled
          aws s3api create-bucket \
            --bucket restaurant-svc-${{ github.event.inputs.environment }}-terraform-state \
            --region us-east-1

          # Enable versioning
          aws s3api put-bucket-versioning \
            --bucket restaurant-svc-${{ github.event.inputs.environment }}-terraform-state \
            --versioning-configuration Status=Enabled

          # Enable encryption
          aws s3api put-bucket-encryption \
            --bucket restaurant-svc-${{ github.event.inputs.environment }}-terraform-state \
            --server-side-encryption-configuration '{
              "Rules": [
                {
                  "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            }'
        fi

        # Check if DynamoDB table exists, create if it doesn't
        if ! aws dynamodb describe-table --table-name restaurant-svc-${{ github.event.inputs.environment }}-terraform-lock 2>/dev/null; then
          # Create table with encryption and deletion protection
          aws dynamodb create-table \
            --table-name restaurant-svc-${{ github.event.inputs.environment }}-terraform-lock \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --deletion-protection-enabled \
            --tags Key=Environment,Value=${{ github.event.inputs.environment }} \
            --region us-east-1

          # Enable point-in-time recovery
          aws dynamodb update-continuous-backups \
            --table-name restaurant-svc-${{ github.event.inputs.environment }}-terraform-lock \
            --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init and Apply ECR
      run: |
        cd terraform/environments/us-east-1/${{ github.event.inputs.environment }}
        terraform init
        terraform apply -auto-approve -var-file=${{ github.event.inputs.environment }}.tfvars -target=module.restaurant_svc_ecr

    - name: Notify Success
      if: success()
      run: echo "✅ Infrastructure bootstrap completed successfully!"

    - name: Notify Failure
      if: failure()
      run: echo "❌ Infrastructure bootstrap failed!"
