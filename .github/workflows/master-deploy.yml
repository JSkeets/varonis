name: Master Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  actions: write
  id-token: write

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Trigger Workflow
      id: trigger_workflow
      uses: actions/github-script@v6
      with:
        script: |
          const response = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'infrastructure-bootstrap.yml',
            ref: 'main',
            inputs: {
              environment: context.payload.inputs.environment
            }
          });
          console.log('Triggered infrastructure bootstrap workflow');
          return response;

    - name: Wait for Workflow Completion
      uses: ./.github/actions/wait-for-workflow
      with:
        workflow_id: infrastructure-bootstrap.yml
        branch: main

  build:
    needs: bootstrap
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Trigger Workflow
      id: trigger_workflow
      uses: actions/github-script@v6
      with:
        script: |
          const response = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'build-and-push.yml',
            ref: 'main',
            inputs: {
              environment: context.payload.inputs.environment
            }
          });
          console.log('Triggered build and push workflow');
          return response;

    - name: Wait for Workflow Completion
      uses: ./.github/actions/wait-for-workflow
      with:
        workflow_id: build-and-push.yml
        branch: main

  terraform:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
    - name: Trigger Workflow
      id: trigger_workflow
      uses: actions/github-script@v6
      with:
        script: |
          const response = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'terraform-apply.yml',
            ref: 'main',
            inputs: {
              environment: context.payload.inputs.environment
            }
          });
          console.log('Triggered terraform apply workflow');
          return response;

    - name: Wait for Workflow Completion
      uses: ./.github/actions/wait-for-workflow
      with:
        workflow_id: terraform-apply.yml
        branch: main

  seed:
    needs: terraform
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
    - name: Trigger Workflow
      id: trigger_workflow
      uses: actions/github-script@v6
      with:
        script: |
          const response = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'seed-dynamodb.yml',
            ref: 'main',
            inputs: {
              environment: context.payload.inputs.environment
            }
          });
          console.log('Triggered DynamoDB seed workflow');
          return response;

    - name: Wait for Workflow Completion
      uses: ./.github/actions/wait-for-workflow
      with:
        workflow_id: seed-dynamodb.yml
        branch: main

  deploy-api:
    needs: seed
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Trigger Workflow
      id: trigger_workflow
      uses: actions/github-script@v6
      with:
        script: |
          const response = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy-api.yml',
            ref: 'main',
            inputs: {
              environment: context.payload.inputs.environment,
              image_tag: context.sha
            }
          });
          console.log('Triggered API deploy workflow');
          return response;

    - name: Wait for Workflow Completion
      uses: ./.github/actions/wait-for-workflow
      with:
        workflow_id: deploy-api.yml
        branch: main

    - name: Get API Gateway URL
      run: |
        cd terraform/environments/us-east-1/${{ github.event.inputs.environment }}
        API_URL=$(terraform output -raw api_gateway_url)
        echo "API_URL=$API_URL" >> $GITHUB_ENV

    - name: Notify Success
      if: success()
      run: |
        echo "✅ Master deployment to ${{ github.event.inputs.environment }} completed successfully!"
        echo "API Gateway URL: ${{ env.API_URL }}"
        echo "Example curl command:"
        echo "curl -X POST ${{ env.API_URL }}/restaurant/query -H 'Content-Type: application/json' -d '{\"query\": \"test query\"}'"

    - name: Notify Failure
      if: failure()
      run: |
        echo "❌ Master deployment to ${{ github.event.inputs.environment }} failed!"

  check-status:
    needs: [bootstrap, build, terraform, seed, deploy-api]
    runs-on: ubuntu-latest
    steps:
    - name: Wait for workflows to complete
      run: sleep 30

    - name: Check Workflow Status
      uses: actions/github-script@v6
      with:
        script: |
          const workflows = [
            'infrastructure-bootstrap.yml',
            'build-and-push.yml',
            'terraform-apply.yml',
            'seed-dynamodb.yml',
            'deploy-api.yml'
          ];
          
          for (const workflowId of workflows) {
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowId,
              branch: 'main',
              per_page: 1
            });
            
            if (!runs.data.workflow_runs.length) {
              core.setFailed(`No runs found for ${workflowId}`);
              return;
            }
            
            const run = runs.data.workflow_runs[0];
            const { status, conclusion } = run;
            console.log(`${workflowId} Status: ${status}, Conclusion: ${conclusion}`);
            
            if (status !== 'completed' || conclusion !== 'success') {
              core.setFailed(`Workflow ${workflowId} failed with Status: ${status}, Conclusion: ${conclusion}`);
              return;
            }
          }
          
          console.log('All workflows completed successfully!');

    - name: Notify Success
      if: success()
      run: |
        echo "✅ All deployments completed successfully!"

    - name: Notify Failure
      if: failure()
      run: |
        echo "❌ One or more deployments failed. Check the workflow logs for details." 