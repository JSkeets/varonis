name: Master Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  actions: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Bootstrap Infrastructure
      id: bootstrap
      uses: actions/github-script@v6
      with:
        script: |
          const startTime = new Date().toISOString();
          console.log(`Starting workflow dispatch at ${startTime}`);
          
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'infrastructure-bootstrap.yml',
            ref: 'main',
            inputs: { environment: context.payload.inputs.environment }
          });
          
          console.log('Waiting 5 seconds for workflow to be registered...');
          await new Promise(resolve => setTimeout(resolve, 5000));
          
          const runs = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'infrastructure-bootstrap.yml',
            branch: 'main',
            per_page: 5
          });
          
          console.log('Found workflow runs:', JSON.stringify(runs.data.workflow_runs.map(r => ({
            id: r.id,
            created_at: r.created_at,
            status: r.status
          })), null, 2));
          
          const newRun = runs.data.workflow_runs.find(run => new Date(run.created_at) >= new Date(startTime));
          
          if (!newRun) {
            throw new Error('Could not find new workflow run');
          }
          
          console.log(`Selected workflow run ID: ${newRun.id} created at ${newRun.created_at}`);
          core.setOutput('run_id', newRun.id.toString());

    - name: Wait for Bootstrap
      uses: ./.github/actions/wait-for-workflow
      with:
        workflow_id: 'infrastructure-bootstrap.yml'
        branch: 'main'
        run_id: ${{ steps.bootstrap.outputs.run_id }}

    - name: Build and Push
      id: build
      uses: actions/github-script@v6
      with:
        script: |
          const startTime = new Date().toISOString();
          console.log(`Starting workflow dispatch at ${startTime}`);
          
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'build-and-push.yml',
            ref: 'main',
            inputs: { environment: context.payload.inputs.environment }
          });
          
          console.log('Waiting 5 seconds for workflow to be registered...');
          await new Promise(resolve => setTimeout(resolve, 5000));
          
          const runs = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'build-and-push.yml',
            branch: 'main',
            per_page: 5
          });
          
          console.log('Found workflow runs:', JSON.stringify(runs.data.workflow_runs.map(r => ({
            id: r.id,
            created_at: r.created_at,
            status: r.status
          })), null, 2));
          
          const newRun = runs.data.workflow_runs.find(run => new Date(run.created_at) >= new Date(startTime));
          
          if (!newRun) {
            throw new Error('Could not find new workflow run');
          }
          
          console.log(`Selected workflow run ID: ${newRun.id} created at ${newRun.created_at}`);
          core.setOutput('run_id', newRun.id.toString());

    - name: Wait for Build
      uses: ./.github/actions/wait-for-workflow
      with:
        workflow_id: 'build-and-push.yml'
        branch: 'main'
        run_id: ${{ steps.build.outputs.run_id }}

    - name: Apply Terraform
      id: terraform
      uses: actions/github-script@v6
      with:
        script: |
          const startTime = new Date().toISOString();
          console.log(`Starting workflow dispatch at ${startTime}`);
          
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'terraform-apply.yml',
            ref: 'main',
            inputs: { environment: context.payload.inputs.environment }
          });
          
          console.log('Waiting 5 seconds for workflow to be registered...');
          await new Promise(resolve => setTimeout(resolve, 5000));
          
          const runs = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'terraform-apply.yml',
            branch: 'main',
            per_page: 5
          });
          
          console.log('Found workflow runs:', JSON.stringify(runs.data.workflow_runs.map(r => ({
            id: r.id,
            created_at: r.created_at,
            status: r.status
          })), null, 2));
          
          const newRun = runs.data.workflow_runs.find(run => new Date(run.created_at) >= new Date(startTime));
          
          if (!newRun) {
            throw new Error('Could not find new workflow run');
          }
          
          console.log(`Selected workflow run ID: ${newRun.id} created at ${newRun.created_at}`);
          core.setOutput('run_id', newRun.id.toString());

    - name: Wait for Terraform
      uses: ./.github/actions/wait-for-workflow
      with:
        workflow_id: 'terraform-apply.yml'
        branch: 'main'
        run_id: ${{ steps.terraform.outputs.run_id }}

    - name: Seed DynamoDB
      id: seed
      uses: actions/github-script@v6
      with:
        script: |
          const startTime = new Date().toISOString();
          console.log(`Starting workflow dispatch at ${startTime}`);
          
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'seed-dynamodb.yml',
            ref: 'main',
            inputs: { environment: context.payload.inputs.environment }
          });
          
          console.log('Waiting 5 seconds for workflow to be registered...');
          await new Promise(resolve => setTimeout(resolve, 5000));
          
          const runs = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'seed-dynamodb.yml',
            branch: 'main',
            per_page: 5
          });
          
          console.log('Found workflow runs:', JSON.stringify(runs.data.workflow_runs.map(r => ({
            id: r.id,
            created_at: r.created_at,
            status: r.status
          })), null, 2));
          
          const newRun = runs.data.workflow_runs.find(run => new Date(run.created_at) >= new Date(startTime));
          
          if (!newRun) {
            throw new Error('Could not find new workflow run');
          }
          
          console.log(`Selected workflow run ID: ${newRun.id} created at ${newRun.created_at}`);
          core.setOutput('run_id', newRun.id.toString());

    - name: Wait for Seed
      uses: ./.github/actions/wait-for-workflow
      with:
        workflow_id: 'seed-dynamodb.yml'
        branch: 'main'
        run_id: ${{ steps.seed.outputs.run_id }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy API
      id: deploy
      uses: actions/github-script@v6
      with:
        script: |
          const startTime = new Date().toISOString();
          console.log(`Starting workflow dispatch at ${startTime}`);
          
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy-api.yml',
            ref: 'main',
            inputs: {
              environment: context.payload.inputs.environment,
              image_tag: context.sha
            }
          });
          
          console.log('Waiting 5 seconds for workflow to be registered...');
          await new Promise(resolve => setTimeout(resolve, 5000));
          
          const runs = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy-api.yml',
            branch: 'main',
            per_page: 5
          });
          
          console.log('Found workflow runs:', JSON.stringify(runs.data.workflow_runs.map(r => ({
            id: r.id,
            created_at: r.created_at,
            status: r.status
          })), null, 2));
          
          const newRun = runs.data.workflow_runs.find(run => new Date(run.created_at) >= new Date(startTime));
          
          if (!newRun) {
            throw new Error('Could not find new workflow run');
          }
          
          console.log(`Selected workflow run ID: ${newRun.id} created at ${newRun.created_at}`);
          core.setOutput('run_id', newRun.id.toString());

    - name: Wait for Deploy
      uses: ./.github/actions/wait-for-workflow
      with:
        workflow_id: 'deploy-api.yml'
        branch: 'main'
        run_id: ${{ steps.deploy.outputs.run_id }}

    - name: Get API Gateway URL
      run: |
        cd terraform/environments/us-east-1/${{ github.event.inputs.environment }}
        API_URL=$(terraform output -raw api_gateway_url)
        echo "API_URL=$API_URL" >> $GITHUB_ENV

    - name: Notify Success
      if: success()
      run: |
        echo "✅ Master deployment to ${{ github.event.inputs.environment }} completed successfully!"
        echo "API Gateway URL: ${{ env.API_URL }}"
        echo "Example curl command:"
        echo "curl -X POST ${{ env.API_URL }}/restaurant/query -H 'Content-Type: application/json' -d '{\"query\": \"test query\"}'"

    - name: Notify Failure
      if: failure()
      run: |
        echo "❌ Master deployment to ${{ github.event.inputs.environment }} failed!" 