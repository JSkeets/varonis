name: 'Wait for Workflow'
description: 'Wait for a workflow to complete and check its status'

inputs:
  workflow_id:
    description: 'The workflow file name to check'
    required: true
  branch:
    description: 'The branch to check'
    required: true
    default: 'main'
  timeout:
    description: 'Maximum time to wait in minutes'
    required: false
    default: '30'

runs:
  using: 'composite'
  steps:
    - name: Wait for Workflow Completion
      uses: actions/github-script@v6
      with:
        script: |
          const workflowId = '${{ inputs.workflow_id }}';
          const branch = '${{ inputs.branch }}';
          const timeoutMinutes = parseInt('${{ inputs.timeout }}');
          
          const startTime = new Date(Date.now() - 30000); // Look back 30 seconds
          const timeoutTime = new Date(Date.now() + timeoutMinutes * 60000);
          
          console.log('Waiting initial 15 seconds for workflow to start...');
          await new Promise(resolve => setTimeout(resolve, 15000));
          
          let completed = false;
          let targetRunId = null;
          let attempts = 0;

          while (!completed) {
            if (new Date() > timeoutTime) {
              throw new Error(`Timeout waiting for workflow ${workflowId} after ${timeoutMinutes} minutes`);
            }

            try {
              console.log(`Checking workflow runs (attempt ${++attempts})...`);
              
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowId,
                branch: branch,
                per_page: 20,
                status: 'in_progress,queued,completed'
              });

              if (runs.data.workflow_runs.length > 0) {
                const sortedRuns = runs.data.workflow_runs.sort((a, b) => 
                  new Date(b.created_at) - new Date(a.created_at)
                );

                const targetRun = sortedRuns.find(run => 
                  Math.abs(new Date(run.created_at) - startTime) < 60000
                );

                if (targetRun) {
                  const { status, conclusion, id, html_url } = targetRun;
                  
                  if (!targetRunId) {
                    targetRunId = id;
                    console.log(`Found matching workflow run: ${id}`);
                    console.log(`Workflow URL: ${html_url}`);
                  }
                  
                  if (id === targetRunId) {
                    console.log(`Run ${id} Status: ${status}, Conclusion: ${conclusion}`);

                    if (status === 'completed') {
                      if (conclusion === 'success') {
                        completed = true;
                        console.log(`Workflow ${workflowId} completed successfully!`);
                      } else {
                        throw new Error(`Workflow failed with conclusion: ${conclusion}`);
                      }
                    } else if (status === 'queued' || status === 'in_progress') {
                      console.log(`Workflow is ${status}. Waiting...`);
                    } else {
                      throw new Error(`Unexpected workflow status: ${status}`);
                    }
                  }
                } else {
                  console.log('No matching workflow run found yet. Still searching...');
                }
              } else {
                console.log('No workflow runs found yet. Waiting...');
              }
            } catch (error) {
              console.log(`Error checking workflow: ${error.message}`);
              if (error.status === 404) {
                throw new Error(`Workflow ${workflowId} not found`);
              }
            }

            if (!completed) {
              const delay = Math.min(10000 * Math.pow(1.1, attempts), 30000);
              console.log(`Waiting ${Math.round(delay/1000)} seconds before next check...`);
              await new Promise(resolve => setTimeout(resolve, delay));
            }
          } 